{"title":"Understanding Guest Experiences: Sentiment and N-gram Analysis of TripAdvisor Hotel Reviews","markdown":{"yaml":{"title":"Understanding Guest Experiences: Sentiment and N-gram Analysis of TripAdvisor Hotel Reviews","format":{"html":{"code-fold":true}},"jupyter":"python3"},"headingText":"EDA","containsRefs":false,"markdown":"\n\nYixin Luo\n\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.util import ngrams\nfrom collections import Counter\nimport nltk\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, accuracy_score\n\n## Load data\ndf = pd.read_csv('~/Downloads/tripadvisor_hotel_reviews.csv')\n\n\n## distribution of ratings\nplt.figure(figsize=(8, 5))\nsns.countplot(data=df, x='Rating', palette='viridis')\nplt.title('Distribution of Ratings')\nplt.xlabel('Rating')\nplt.ylabel('Count')\nplt.show()\n```\n\n```{python}\n## Check the length of reviews\ndf[\"word_length\"] = df[\"Review\"].apply(len)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x=\"word_length\", hue=\"Rating\", multiple=\"stack\", palette=\"bright\")\nplt.title('Distribution of Text Lengths by Class', fontsize=16)\nplt.xlabel('Text Length', fontsize=14)\nplt.ylabel('Frequency')\nplt.show()\n```\n\n```{python}\nfrom collections import Counter\nimport pandas as pd\nimport re\n\n# Assuming your DataFrame is named 'df' and the column with text is 'Review'\n\n# Step 1: Preprocess the text\ndef clean_text(text):\n    text = text.lower()  # Convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n    text = re.sub(r'\\d+', '', text)  # Remove numbers\n    return text\n\ndf['cleaned_review'] = df['Review'].apply(clean_text)\n\n# Step 2: Tokenize the text and count words\nall_words = ' '.join(df['cleaned_review']).split()  # Combine all reviews and split into words\nword_counts = Counter(all_words)  # Count word frequencies\n\n# Step 3: Get the most common words\nmost_common_words = word_counts.most_common(20)  # Top 20 most common words\nprint(\"Most Common Words:\", most_common_words)\n\n# Convert to a DataFrame for better readability\nmost_common_df = pd.DataFrame(most_common_words, columns=['Word', 'Frequency'])\nprint(most_common_df)\n\n# Horizontal visualization\nplt.figure(figsize=(10, 6))\nplt.barh(most_common_df['Word'], most_common_df['Frequency'], color='skyblue')\nplt.title('Top 20 Most Common Words in Reviews', fontsize=16)\nplt.xlabel('Frequency', fontsize=12)\nplt.ylabel('Words', fontsize=12)\nplt.gca().invert_yaxis()  # Invert y-axis to show highest frequency on top\nplt.tight_layout()\nplt.show()\n```\n\n## Text Cleaning\n\n### remove the big comments\n\n```{python}\n# remove the big comments\ndf = df[df['word_length'] <= 3000]\n\ndf[\"word_length\"] = df[\"Review\"].apply(len)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x=\"word_length\", hue=\"Rating\", multiple=\"stack\", palette=\"bright\")\nplt.title('Distribution of Text Lengths by Class', fontsize=16)\nplt.xlabel('Text Length', fontsize=14)\nplt.ylabel('Frequency')\nplt.show()\n```\n\n```{python}\nimport pandas as pd\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport nltk\n\n\n# Text cleaning function\ndef clean_text(text):\n    text = text.lower()  # Convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n    text = re.sub(r'\\d+', '', text)  # Remove numbers\n    text = re.sub(r'\\s+', ' ', text).strip()  # Remove extra whitespace\n    return text\n\n# Apply text cleaning\ndf.loc[:, 'cleaned_review'] = df['Review'].apply(clean_text)\nprint(df)\n```\n\n## Sentiment Analysis\n```{python}\n## Define aspects\naspects = ['location', 'service', 'room', 'staff']\n\nimport pandas as pd\nfrom transformers import pipeline\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tqdm import tqdm\n\ndf_sample = df.sample(1000, random_state=42) \ndf_sample['cleaned_review'] = df_sample['Review'].apply(clean_text)\n\n# Initialize DistilBERT pipeline\naspect_sentiment_pipeline = pipeline(\n    \"text-classification\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\",\n    truncation=True,\n    padding=True\n)\n\n# Function to handle missing aspects and perform sentiment analysis\ndef analyze_aspect_sentiments_with_missing_handling(review, aspects):\n    aspect_sentiments = {}\n    for aspect in aspects:\n        # Check if the aspect is mentioned in the review\n        if aspect in review:\n            text = f\"{review} What do you think about the {aspect}?\"\n            result = aspect_sentiment_pipeline(text)\n            aspect_sentiments[aspect] = {\n                'label': result[0]['label'],  # Positive, Neutral, or Negative\n                'score': result[0]['score'] if result[0]['label'] == 'POSITIVE' else -result[0]['score']\n            }\n        else:\n            # Assign default value if aspect is not mentioned\n            aspect_sentiments[aspect] = {\n                'label': 'Not Mentioned',\n                'score': None\n            }\n    return aspect_sentiments\n# Apply the function using multithreading for efficiency\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    results = list(tqdm(executor.map(lambda x: analyze_aspect_sentiments_with_missing_handling(x, aspects), \n                                     df_sample['cleaned_review']), \n                        total=len(df_sample)))\n\n# Add results to the DataFrame\ndf_sample['aspect_sentiments'] = results\n\n# Extract aspect scores into a separate DataFrame\naspect_scores_df = pd.json_normalize(df_sample['aspect_sentiments'])\n\nprint(df_sample[['Review', 'aspect_sentiments']].head())\n```\n\n```{python}\n# Count occurrences of each label for each aspect\nlabel_columns = [col for col in aspect_scores_df.columns if '.label' in col]\nlabel_counts = {}\n\nfor col in label_columns:\n    aspect = col.split('.')[0]\n    label_counts[aspect] = aspect_scores_df[col].value_counts()\n\n# Convert to DataFrame\nlabel_counts_df = pd.DataFrame(label_counts).fillna(0)\n\n# Plot a bar chart\nlabel_counts_df.plot(kind='bar', figsize=(12, 6), colormap='viridis')\nplt.title(\"Sentiment Distribution Across Aspects\")\nplt.xlabel(\"Sentiment Labels\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=0)\nplt.legend(title=\"Aspects\", loc='upper right')\nplt.show()\n```\n\n```{python}\n# Calculate mean scores for each aspect\nmean_scores = aspect_scores_df[[col for col in aspect_scores_df.columns if '.score' in col]].mean()\n\n# Prepare heatmap data\nheatmap_data = pd.DataFrame(mean_scores).T\nheatmap_data.columns = [col.split('.')[0] for col in heatmap_data.columns]\n\n# Plot heatmap\nplt.figure(figsize=(10, 4))\nsns.heatmap(heatmap_data, annot=True, cmap=\"coolwarm\", cbar=True, fmt=\".2f\")\nplt.title(\"Mean Sentiment Scores for Aspects\")\nplt.xlabel(\"Aspects\")\nplt.ylabel(\"\")\nplt.show()\n```\n\n```{python}\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Calculate mean sentiment scores\nmean_scores = aspect_scores_df[[col for col in aspect_scores_df.columns if '.score' in col]].mean()\naspects = [col.split('.')[0] for col in mean_scores.index]\n\n# Radar chart\nfig = go.Figure()\nfig.add_trace(go.Scatterpolar(\n    r=mean_scores,\n    theta=aspects,\n    fill='toself',\n    name='Average Sentiment Scores'\n))\n\nfig.update_layout(\n    polar=dict(radialaxis=dict(visible=True, range=[-1, 1])),\n    title=\"Aspect-Based Sentiment Radar Chart\",\n    showlegend=True\n)\nfig.show()\n```\n\n```{python}\nimport plotly.express as px\n\n# Prepare data for the sunburst chart\nlabel_data = []\nfor aspect in ['location', 'service', 'room', 'staff']:\n    labels = aspect_scores_df[f'{aspect}.label'].value_counts()\n    for label, count in labels.items():\n        label_data.append({'Aspect': aspect, 'Label': label, 'Count': count})\n\nlabel_df = pd.DataFrame(label_data)\n\n# Sunburst chart\nfig = px.sunburst(label_df, path=['Aspect', 'Label'], values='Count',\n                  title=\"Aspect-Based Sentiment Distribution (Sunburst)\",\n                  color='Count', color_continuous_scale='Viridis')\nfig.show()\n```\n","srcMarkdownNoYaml":"\n\nYixin Luo\n\n## EDA\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.util import ngrams\nfrom collections import Counter\nimport nltk\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, accuracy_score\n\n## Load data\ndf = pd.read_csv('~/Downloads/tripadvisor_hotel_reviews.csv')\n\n\n## distribution of ratings\nplt.figure(figsize=(8, 5))\nsns.countplot(data=df, x='Rating', palette='viridis')\nplt.title('Distribution of Ratings')\nplt.xlabel('Rating')\nplt.ylabel('Count')\nplt.show()\n```\n\n```{python}\n## Check the length of reviews\ndf[\"word_length\"] = df[\"Review\"].apply(len)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x=\"word_length\", hue=\"Rating\", multiple=\"stack\", palette=\"bright\")\nplt.title('Distribution of Text Lengths by Class', fontsize=16)\nplt.xlabel('Text Length', fontsize=14)\nplt.ylabel('Frequency')\nplt.show()\n```\n\n```{python}\nfrom collections import Counter\nimport pandas as pd\nimport re\n\n# Assuming your DataFrame is named 'df' and the column with text is 'Review'\n\n# Step 1: Preprocess the text\ndef clean_text(text):\n    text = text.lower()  # Convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n    text = re.sub(r'\\d+', '', text)  # Remove numbers\n    return text\n\ndf['cleaned_review'] = df['Review'].apply(clean_text)\n\n# Step 2: Tokenize the text and count words\nall_words = ' '.join(df['cleaned_review']).split()  # Combine all reviews and split into words\nword_counts = Counter(all_words)  # Count word frequencies\n\n# Step 3: Get the most common words\nmost_common_words = word_counts.most_common(20)  # Top 20 most common words\nprint(\"Most Common Words:\", most_common_words)\n\n# Convert to a DataFrame for better readability\nmost_common_df = pd.DataFrame(most_common_words, columns=['Word', 'Frequency'])\nprint(most_common_df)\n\n# Horizontal visualization\nplt.figure(figsize=(10, 6))\nplt.barh(most_common_df['Word'], most_common_df['Frequency'], color='skyblue')\nplt.title('Top 20 Most Common Words in Reviews', fontsize=16)\nplt.xlabel('Frequency', fontsize=12)\nplt.ylabel('Words', fontsize=12)\nplt.gca().invert_yaxis()  # Invert y-axis to show highest frequency on top\nplt.tight_layout()\nplt.show()\n```\n\n## Text Cleaning\n\n### remove the big comments\n\n```{python}\n# remove the big comments\ndf = df[df['word_length'] <= 3000]\n\ndf[\"word_length\"] = df[\"Review\"].apply(len)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x=\"word_length\", hue=\"Rating\", multiple=\"stack\", palette=\"bright\")\nplt.title('Distribution of Text Lengths by Class', fontsize=16)\nplt.xlabel('Text Length', fontsize=14)\nplt.ylabel('Frequency')\nplt.show()\n```\n\n```{python}\nimport pandas as pd\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport nltk\n\n\n# Text cleaning function\ndef clean_text(text):\n    text = text.lower()  # Convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n    text = re.sub(r'\\d+', '', text)  # Remove numbers\n    text = re.sub(r'\\s+', ' ', text).strip()  # Remove extra whitespace\n    return text\n\n# Apply text cleaning\ndf.loc[:, 'cleaned_review'] = df['Review'].apply(clean_text)\nprint(df)\n```\n\n## Sentiment Analysis\n```{python}\n## Define aspects\naspects = ['location', 'service', 'room', 'staff']\n\nimport pandas as pd\nfrom transformers import pipeline\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tqdm import tqdm\n\ndf_sample = df.sample(1000, random_state=42) \ndf_sample['cleaned_review'] = df_sample['Review'].apply(clean_text)\n\n# Initialize DistilBERT pipeline\naspect_sentiment_pipeline = pipeline(\n    \"text-classification\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\",\n    truncation=True,\n    padding=True\n)\n\n# Function to handle missing aspects and perform sentiment analysis\ndef analyze_aspect_sentiments_with_missing_handling(review, aspects):\n    aspect_sentiments = {}\n    for aspect in aspects:\n        # Check if the aspect is mentioned in the review\n        if aspect in review:\n            text = f\"{review} What do you think about the {aspect}?\"\n            result = aspect_sentiment_pipeline(text)\n            aspect_sentiments[aspect] = {\n                'label': result[0]['label'],  # Positive, Neutral, or Negative\n                'score': result[0]['score'] if result[0]['label'] == 'POSITIVE' else -result[0]['score']\n            }\n        else:\n            # Assign default value if aspect is not mentioned\n            aspect_sentiments[aspect] = {\n                'label': 'Not Mentioned',\n                'score': None\n            }\n    return aspect_sentiments\n# Apply the function using multithreading for efficiency\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    results = list(tqdm(executor.map(lambda x: analyze_aspect_sentiments_with_missing_handling(x, aspects), \n                                     df_sample['cleaned_review']), \n                        total=len(df_sample)))\n\n# Add results to the DataFrame\ndf_sample['aspect_sentiments'] = results\n\n# Extract aspect scores into a separate DataFrame\naspect_scores_df = pd.json_normalize(df_sample['aspect_sentiments'])\n\nprint(df_sample[['Review', 'aspect_sentiments']].head())\n```\n\n```{python}\n# Count occurrences of each label for each aspect\nlabel_columns = [col for col in aspect_scores_df.columns if '.label' in col]\nlabel_counts = {}\n\nfor col in label_columns:\n    aspect = col.split('.')[0]\n    label_counts[aspect] = aspect_scores_df[col].value_counts()\n\n# Convert to DataFrame\nlabel_counts_df = pd.DataFrame(label_counts).fillna(0)\n\n# Plot a bar chart\nlabel_counts_df.plot(kind='bar', figsize=(12, 6), colormap='viridis')\nplt.title(\"Sentiment Distribution Across Aspects\")\nplt.xlabel(\"Sentiment Labels\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=0)\nplt.legend(title=\"Aspects\", loc='upper right')\nplt.show()\n```\n\n```{python}\n# Calculate mean scores for each aspect\nmean_scores = aspect_scores_df[[col for col in aspect_scores_df.columns if '.score' in col]].mean()\n\n# Prepare heatmap data\nheatmap_data = pd.DataFrame(mean_scores).T\nheatmap_data.columns = [col.split('.')[0] for col in heatmap_data.columns]\n\n# Plot heatmap\nplt.figure(figsize=(10, 4))\nsns.heatmap(heatmap_data, annot=True, cmap=\"coolwarm\", cbar=True, fmt=\".2f\")\nplt.title(\"Mean Sentiment Scores for Aspects\")\nplt.xlabel(\"Aspects\")\nplt.ylabel(\"\")\nplt.show()\n```\n\n```{python}\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Calculate mean sentiment scores\nmean_scores = aspect_scores_df[[col for col in aspect_scores_df.columns if '.score' in col]].mean()\naspects = [col.split('.')[0] for col in mean_scores.index]\n\n# Radar chart\nfig = go.Figure()\nfig.add_trace(go.Scatterpolar(\n    r=mean_scores,\n    theta=aspects,\n    fill='toself',\n    name='Average Sentiment Scores'\n))\n\nfig.update_layout(\n    polar=dict(radialaxis=dict(visible=True, range=[-1, 1])),\n    title=\"Aspect-Based Sentiment Radar Chart\",\n    showlegend=True\n)\nfig.show()\n```\n\n```{python}\nimport plotly.express as px\n\n# Prepare data for the sunburst chart\nlabel_data = []\nfor aspect in ['location', 'service', 'room', 'staff']:\n    labels = aspect_scores_df[f'{aspect}.label'].value_counts()\n    for label, count in labels.items():\n        label_data.append({'Aspect': aspect, 'Label': label, 'Count': count})\n\nlabel_df = pd.DataFrame(label_data)\n\n# Sunburst chart\nfig = px.sunburst(label_df, path=['Aspect', 'Label'], values='Count',\n                  title=\"Aspect-Based Sentiment Distribution (Sunburst)\",\n                  color='Count', color_continuous_scale='Viridis')\nfig.show()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","theme":"cosmo","title":"Understanding Guest Experiences: Sentiment and N-gram Analysis of TripAdvisor Hotel Reviews","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}