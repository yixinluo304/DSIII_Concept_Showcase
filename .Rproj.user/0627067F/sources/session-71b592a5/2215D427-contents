---
title: "China in the Development World"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  warning: false
  message: false
---

# China in the Development World

This project will showcase the impact of China's role in the global arena, specifically in the Infrastructure development industry. We will explore several regions and countries that have benefited from this negotiations. This dataset is public and sources are several.

```{r}
library(here)
library(sf)
library(leaflet)
library(tidyverse)
library(readxl)
```

```{r}
# importing data
df <- read_excel("~/Downloads/china-development/data/AidDatasGlobalChineseDevelopmentFinanceDataset_v3.0.xlsx", sheet = "GCDF_3.0", col_names = TRUE)
df <- as.data.frame(df)

#class(df)
#head(df)
#str(df)
#typeof(df)
```

```{r}
#selecting specific column information
df_filtered <- df %>% select("AidData Record ID", "Financier Country", "Recipient", 
                    "Recipient Region", "Commitment Year", "Completion Year",
                    "Title", "Description", "Status", "Intent", 
                    "Flow Type Simplified", "Flow Class", "Sector Name",
                    "Infrastructure", "Funding Agencies Type",
                    "Implementing Agencies Type",
                    "Adjusted Amount (Constant USD 2021)",
                    "Location Narrative", "OECD ODA Income Group")


```

```{r}
#getting specific columns
df_filtered <- df %>% select(
  "AidData Record ID", "Financier Country", "Recipient", 
  "Recipient Region", "Commitment Year", "Completion Year",
  "Title", "Description", "Status", "Intent", 
  "Flow Type Simplified", "Flow Class", "Sector Name",
  "Infrastructure", "Funding Agencies Type",
  "Implementing Agencies Type",
  "Adjusted Amount (Constant USD 2021)",
  "Location Narrative", "OECD ODA Income Group",
  "Geographic Level of Precision Available",
  "Geospatial Feature Available")

#filtering to get 961 projects with geospatial features
df_filtered <- df_filtered %>% 
  filter(`Flow Class` != "Vague (Official Finance)",
         `Adjusted Amount (Constant USD 2021)` > 100000000.00,
         `Geographic Level of Precision Available` == "Precise",
         `Geospatial Feature Available` == "Yes")
```

```{r}
#class(df_filtered)
#colnames(df_filtered)
#head(df_filtered)
```

```{r}

# Directory containing the GeoJSON files
geojson_dir <- "./data-spatial"

# Get a list of GeoJSON file paths
geojson_files <- list.files(path = geojson_dir, pattern = "\\.geojson$", full.names = TRUE)
```

```{r}
geojson_list <- lapply(geojson_files, st_read, quiet = TRUE)

# Name each element in the list with the corresponding file name (optional)
names(geojson_list) <- basename(geojson_files)
```

```{r}

# Iterate and add properties
geojson_list <- lapply(geojson_list, function(geojson) {
  # Get the GeoJSON's unique identifier (assumes it's in a column `id`)
  geo_id <- geojson$id[1]  # Replace with the actual name of your `id` field

  # Match the row in `df`
  matched_row <- df_filtered %>% filter(`AidData Record ID` == geo_id)

  # Add the properties if a match is found
  if (nrow(matched_row) > 0) {
    geojson$Title <- matched_row$Title
    geojson$Amount <- matched_row$Amount
    geojson$Status <- matched_row$Status
    geojson$`Recipient Region` <- matched_row$`Recipient Region`
    geojson$Description <- matched_row$Description
    geojson$Intent <- matched_row$Intent
    geojson$`Flow Type Simplified` <- matched_row$`Flow Type Simplified`
    geojson$`Flow Class` <- matched_row$`Flow Class`
    geojson$`Funding Agencies Type` <- matched_row$`Funding Agencies Type`
    geojson$`Implementing Agencies Type` <- matched_row$`Implementing Agencies Type`
    geojson$`Location Narrative` <- matched_row$`Location Narrative`
    geojson$`OECD ODA Income Group` <- matched_row$`OECD ODA Income Group`


  } else {
    # If no match, assign default or NA
    geojson$Title <- NA
    geojson$Amount <- NA
    geojson$Status <- NA
    geojson$`Recipient Region` <- NA
    geojson$Description <- NA
    geojson$Intent <- NA
    geojson$`Flow Type Simplified` <- NA
    geojson$`Flow Class` <- NA
    geojson$`Funding Agencies Type` <- NA
    geojson$`Implementing Agencies Type` <- NA
    geojson$`Location Narrative` <- NA
    geojson$`OECD ODA Income Group` <- NA
  }

  return(geojson)
})
```

```{r}


# Combine all GeoJSON files into one sf object
combined_geojson <- do.call(rbind, geojson_list)

# Create a leaflet map
leaflet(data = combined_geojson) %>%
  addProviderTiles("OpenStreetMap") %>%
  addPolygons(
    color = "darkgreen",
    fillColor = "lightgreen",
    fillOpacity = 0.6,
    popup = ~paste(
      "<strong>Title:</strong>", Title, "<br>",
      "<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
      "<strong>Status:</strong>", Status, "<br>",
      "<strong>Narrative:</strong>", `Location Narrative`
    )
  )

```

```{r}

library(shiny)
library(leaflet)
library(sf)
library(dplyr)

# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)

# Define UI
ui <- fluidPage(
  # Application title
  titlePanel("Map of Projects"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "region_filter",
                  label = "Filter by Recipient Region:",
                  choices = sort(unique(combined_geojson$`Recipient Region`)),
                  selected = NULL,
                  multiple = TRUE)
    ),
    mainPanel(
      # Leaflet output
      leafletOutput("map", height = "700px")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  # Reactive filtered data
  filtered_data <- reactive({
    if (is.null(input$region_filter) || length(input$region_filter) == 0) {
      combined_geojson  # Return all data if no filter selected
    } else {
      combined_geojson %>%
        filter(`Recipient Region` %in% input$region_filter)
    }
  })
  
  # Render the Leaflet map
  output$map <- renderLeaflet({
    leaflet(data = filtered_data()) %>%
      addProviderTiles("OpenStreetMap") %>%
      addPolygons(
        color = "darkgreen",
        fillColor = "lightgreen",
        fillOpacity = 0.6,
        popup = ~paste(
          "<strong>Title:</strong>", Title, "<br>",
          "<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
          "<strong>Status:</strong>", Status, "<br>",
          "<strong>Narrative:</strong>", `Location Narrative`
        )
      )
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

```{r}
```

```{r}
library(here)
library(sf)
library(leaflet)
library(tidyverse)

l <- sf::st_read(here("fall_2024/activities/Liquor_Licenses.geojson")) %>%
      st_transform(crs = 4326)

head(l)

l$long <- st_coordinates(l)[, 1]

l$lat <- st_coordinates(l)[, 2]

leaflet() %>%
    addProviderTiles("OpenStreetMap",
                     group = "OpenStreetMap")  %>%
    addCircleMarkers(data = 
              l, lat = ~lat,
               lng = ~long,
               color = 'darkgreen', radius = 2,
              clusterOptions = markerClusterOptions(),
              label = sprintf("Trade name: %s<br>Type of location: %s",
                               l$TRADE_NAME,
                               l$TYPE) %>%
                            lapply(htmltools::HTML))
```

# Activity 2: put that code in a Shiny app + add filtering option

-   Embed the above map in a Shiny app
-   Use the `selectInput` widget to allow users to filter the points by 1 or more types of establishments
-   When doing the filtering, create a `reactive` object on the server side that stores the filtered output

```{r}
library(shiny)
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(sf)
library(here)

l <- sf::st_read(here("fall_2024/activities/Liquor_Licenses.geojson")) %>%
  st_transform(crs = 4326)
l$long <- st_coordinates(l)[, 1]

l$lat <- st_coordinates(l)[, 2]


ui <- fluidPage(
  # Application title
  titlePanel("Map of Liquor Licenses in DC"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId= "input_type",
                  label = "Type of establishment:",
                  choices = sort(unique(l$TYPE)),
                  selected = "Tavern",
                  multiple = TRUE)
    ),
    mainPanel(
      # Leaflet output
      leafletOutput("map")
    )
  )
  
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  
  d <- reactive({
    l %>%
      filter(TYPE %in% input$input_type)
    
  })
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("OpenStreetMap",
                       group = "OpenStreetMap")  %>%
      addCircleMarkers(data = 
                         d(), lat = ~lat,
                       lng = ~long,
                       color = 'darkgreen', radius = 2,
                       clusterOptions = markerClusterOptions(),
                       label = sprintf("Trade name: %s<br>Type of location: %s",
                                       d()$TRADE_NAME,
                                       d()$TYPE) %>%
                         lapply(htmltools::HTML))
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)
```

# Activity 3: modify the Shiny app to have one tab with the map, another with data to download

Create a two-tab app:

-   The first tab should contain the map
-   The second tab should contain a button to download a csv file reflecting the selected establishment types

```{r}

ui <- fluidPage(
  # Application title
  titlePanel("Map of Liquor Licenses in DC"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId= "input_type",
                  label = "Type of establishment:",
                  choices = sort(unique(l$TYPE)),
                  selected = "Tavern",
                  multiple = TRUE)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Map of locations", leafletOutput("map")),
        tabPanel("Download Locations", 
                 downloadButton("csv_download", "Download the locations"))
      )
    )
  )
  
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  
  d <- reactive({
    l %>%
      filter(TYPE %in% input$input_type)
    
  })
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("OpenStreetMap",
                       group = "OpenStreetMap")  %>%
      addCircleMarkers(data = 
                         d(), lat = ~lat,
                       lng = ~long,
                       color = 'darkgreen', radius = 2,
                       clusterOptions = markerClusterOptions(),
                       label = sprintf("Trade name: %s<br>Type of location: %s",
                                       d()$TRADE_NAME,
                                       d()$TYPE) %>%
                         lapply(htmltools::HTML))
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)
```
